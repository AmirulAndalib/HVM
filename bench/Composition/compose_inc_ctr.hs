n           = 26 :: Int
data Bits   = E | O Bits | I Bits deriving Show
comp 0 f x  = f x
comp n f x  = comp (n - 1) (\k -> f (f k)) x
inc E       = E
inc (O bs)  = I bs
inc (I bs)  = O (inc bs)
zero 0      = E
zero n      = O (zero (n - 1))
toInt (E)   = 0
toInt (O n) = toInt n * 2
toInt (I n) = toInt n * 2 + 1
main        = print $ toInt (comp n inc (zero 32))
