// Sort : Nums -> Nums
(Sort t) = (Sorter.to_nums (Sorter.from_nums t))

// Sorter.from_nums : Nums -> Sorter
(Sorter.from_nums None)       = E
(Sorter.from_nums (Some a))   = (Sorter.from_num a)
(Sorter.from_nums (Node a b)) = (Sorter.merge (Sorter.from_nums a) (Sorter.from_nums b))

// Sorter.from_num : Num -> Sorter
(Sorter.from_num n) = (Sorter.from_num.a 24 n T)
  (Sorter.from_num.a 0 n r) = r
  (Sorter.from_num.a s n r) = (Sorter.from_num.a (- s 1) (>> n 1) (Sorter.from_num.b (& n 1) r))
  (Sorter.from_num.b 0 r)   = (N r E)
  (Sorter.from_num.b 1 r)   = (N E r)

// Sorter.merge : Sorter -> Sorter -> Sorter
(Sorter.merge E       E)       = E
(Sorter.merge E       T)       = T
(Sorter.merge T       E)       = T
(Sorter.merge T       T)       = T
(Sorter.merge E       (N c d)) = (N c d)
(Sorter.merge (N a b) E)       = (N a b)
(Sorter.merge (N a b) (N c d)) = (N (Sorter.merge a c) (Sorter.merge b d))

// Sorter.to_nums : Sorter -> Nums
(Sorter.to_nums t) = (Sorter.to_nums.go 0 t)
  (Sorter.to_nums.go x E)       = None
  (Sorter.to_nums.go x T)       = (Some x)
  (Sorter.to_nums.go x (N a b)) =
    let x = (<< x 1)
    let a = (Sorter.to_nums.go x       a)
    let b = (Sorter.to_nums.go (| x 1) b)
    (Node a b)

// Reverse : Nums -> Nums
(Reverse None)       = None
(Reverse (Some a))   = (Some a)
(Reverse (Node a b)) = (Node (Reverse b) (Reverse a))

// Sum : Nums -> Num
(Sum None)       = 0
(Sum (Some x))   = x
(Sum (Node a b)) = (+ (Sum a) (Sum b))

// Gen : Num -> Nums
(Gen n) = (Gen.go n 0)
  (Gen.go 0 x) = (Some x)
  (Gen.go n x) =
    let x = (<< x 1)
    let n = (- n 1)
    (Node (Gen.go n x) (Gen.go n (| x 1)))

// 23 ~> 460m - 470m rewrites/s
(Main n) = (Sum (Sort (Reverse (Gen 24))))








//(Sorter.from_num.bit 0 r) = (N r E)
//(Sorter.from_num.bit n r) = (N E r)
//(Sorter.from_num n) =
  //let r = T 
  //let r = (Sorter.from_num.bit (& n 1) r)
  //let r = (Sorter.from_num.bit (& n 2) r)
  //let r = (Sorter.from_num.bit (& n 4) r)
  //let r = (Sorter.from_num.bit (& n 8) r)
  //let r = (Sorter.from_num.bit (& n 16) r)
  //let r = (Sorter.from_num.bit (& n 32) r)
  //let r = (Sorter.from_num.bit (& n 64) r)
  //let r = (Sorter.from_num.bit (& n 128) r)
  //let r = (Sorter.from_num.bit (& n 256) r)
  //let r = (Sorter.from_num.bit (& n 512) r)
  //let r = (Sorter.from_num.bit (& n 1024) r)
  //let r = (Sorter.from_num.bit (& n 2048) r)
  //let r = (Sorter.from_num.bit (& n 4096) r)
  //let r = (Sorter.from_num.bit (& n 8192) r)
  //let r = (Sorter.from_num.bit (& n 16384) r)
  //let r = (Sorter.from_num.bit (& n 32768) r)
  //let r = (Sorter.from_num.bit (& n 65536) r)
  //let r = (Sorter.from_num.bit (& n 131072) r)
  //let r = (Sorter.from_num.bit (& n 262144) r)
  //let r = (Sorter.from_num.bit (& n 524288) r)
  //let r = (Sorter.from_num.bit (& n 1048576) r)
  //let r = (Sorter.from_num.bit (& n 2097152) r)
  //let r = (Sorter.from_num.bit (& n 4194304) r)
  //let r = (Sorter.from_num.bit (& n 8388608) r)
  //r

